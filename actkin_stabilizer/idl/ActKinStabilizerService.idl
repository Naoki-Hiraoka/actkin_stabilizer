#ifndef ActKinStabilizerService_idl
#define ActKinStabilizerService_idl

#include "ExtendedDataTypes.idl" // openrtm

module actkin_stabilizer
{
  struct PosePointIdl{
    RTC::Pose3D pose; // parent frame.
    sequence<double, 6> velocity; // parent frame. local origin.
    sequence<double, 6> acceleration; // parent frame. local origin.
    double time; // time from prev [s]
  };
  struct WrenchPointIdl{
    sequence<double, 6> wrench; // parent frame. local origin.
    double time; // time from prev [s]
  };

  struct ContactParamIdl{
    string name;
    unsigned long stateId; // 現在のstateId以外のstateIdを伴う指令は無視する
    boolean remove; // trueならremoveする
    // obj=="", link=="": world
    // obj=="", link==[親joint名]: robotのlink
    // obj==[obj名], link==[親joint名]: objectのlink
    string obj1;
    string link1;
    RTC::Pose3D localPose1; // link1 frame.
    string obj2;
    string link2;
    sequence<boolean, 6> axis; // localPose1 frame/origin. 動かせない&接触力が発生する軸のみtrue
    sequence<sequence<double> > C; // localPose1 frame/origin. link1がlink2から受ける力に関する接触力制約. 列はaxisがtrueの軸数に対応
    sequence<double> ld;
    sequence<double> ud;
  };

  struct AttentionParamIdl{
    string name;
    unsigned long stateId; // 現在のstateId以外のstateIdを伴う指令は無視する
    boolean remove; // trueならremoveする
    // obj=="", link=="": world
    // obj=="", link==[親joint名]: robotのlink
    // obj=="", link=="CM": robotの重心
    // obj==[obj名], link==[親joint名]: objectのlink
    // obj==[obj名], link=="CM": objectの重心
    string obj1;
    string link1;
    RTC::Pose3D initLocalPose1; // link1 frame
    sequence<double, 6> initRefWrench; // world frame. localPose origin. link1がlocalPose1の位置で受ける力. (link2はlocalPose2の位置で反対の力を受ける)
    string obj2;
    string link2;
    sequence<sequence<double, 6> > Cp; // localPose1 frame/origin. localpose1から見たlocalpose2の位置姿勢に関する制約
    sequence<double> ldp;
    sequence<double> udp;
    sequence<double> Kp; // - Kp * (Cp * 位置姿勢 - ldp|udp) を、分解加速度制御の目標加速度として使う
    sequence<double> Dp; // - Dp * Cp * 速度 を、分解加速度制御の目標加速度として使う
    sequence<double> limitp; // (Cp * 位置姿勢 - ldp|udp)に対するlimit
    sequence<double> weightp; // 分解加速度制御の重み. default1.0
    long priority; // 分解加速度制御の優先度. 大きいほど高優先度
    double horizon; // [s]. 0より大きいなら、MPCになる.(world-重心のみ可)
    sequence<sequence<double, 6> > Cw; // localPose1 frame/origin. localpose1から見たlocalpose2の位置姿勢に関する制約
    sequence<double> ldw;
    sequence<double> udw;
    sequence<double> Kw; // - Kw * (Cw * 位置姿勢 - ldw|udw) を、目標反力として使う
    sequence<double> Dw; // - Dw * Cw * 速度 を、目標反力として使う
    sequence<double> limitw; // (Cw * 位置姿勢 - ldw|udw)に対するlimit
    // 重心の場合、回転成分は無視する.全てworld系の座標軸を使う. MPCのとき、Kp[0] / Dp[0] をomegaとして使う.
  };

  struct AttentionDataIdl{
    string name;
    unsigned long id; // 現在のstateId以外のstateIdを伴う指令は無視する
    sequence<PosePointIdl> localPose1; // link1 frame.
    sequence<PosePointIdl> localPose2; // link2 frame.
    sequence<WrenchPointIdl> refWrench; // world frame. localPose origin. link1がlocalPose1の位置で受ける力. (link2はlocalPose2の位置で反対の力を受ける)
  };

  struct PrimitiveStateIdl{
    // command: リストに含まれていないParamやDataは現状維持する
    // state: この値をcommandとして送ると今と同じになる.
    RTC::Time tm;
    sequence<ContactParamIdl> contactParams;
    sequence<AttentionParamIdl> attentionParams;
    sequence<AttentionDataIdl> attentionDatas;
  };

  struct ObjectStateIdl{
    RTC::Time tm; // command: not used.    state: 最後にstateが送られた時刻. 0ならまだ
    string name; // ""ならrobot. robotはXYZ,yawのみ変更可
    RTC::Pose3D pose; // parent frame. rootLinkの位置姿勢
    sequence<double> q; // 各関節の角度
  };
  typedef sequence<ObjectStateIdl> ObjectStateIdlSeq;

  enum EmergencyCheckMode {
    NO_CHECK,
    CM
  };

  interface ActKinStabilizerService
  {
    boolean startStabilizer();
    boolean stopStabilizer();

    boolean setPrimitiveState(in PrimitiveStateIdl command); // リストに含まれていないParamやDataは現状維持する
    boolean getPrimitiveState(out PrimitiveStateIdl command);
    boolean resetPrimitiveState(in PrimitiveStateIdl command); // リストに含まれていないParamやDataは消える. stateIdを無視. stopStabilizer中にしか不可
    boolean goActual(); // attentionDatasのpose2をactualへ. refWrenchを0へ.

    boolean loadObject(in string name, in string file);
    boolean unloadObject(in string name);

    boolean setObjectState(in ObjectStateIdl obj); // 他のobjは現状維持する
    boolean setObjectStates(in ObjectStateIdlSeq objs); // リストに含まれていないobjは現状維持する
    boolean getObjectStates(out ObjectStateIdlSeq objs);

    struct ActKinStabilizerParam
    {
      // ActKinStabilizer
      /// 要素数と順序はnumJoints()と同じ. falseの場合、tauはrefの値をそのまま出力する(writeOutputPort時にref値で上書き). IKでは動かさない.
      sequence<string> controllable_joints;
      /// Transition time [s] for start Stabilizer. 下限0.01[s]
      double st_start_transition_time;
      /// Transition time [s] for stop Stabilizer. 下限0.01[s]
      double st_stop_transition_time;

      // ActToGenFrameConverter
      /// [roll, pitch, yaw]. rootLink Frame. Actual robotのrootLinkの姿勢に加えるオフセット. IMUの取り付け位置のオフセットを考慮するためのものではない(それはモデルファイルを変えれば良い). 全身のキャリブのずれなど次第に出てくるなにかしらのずれをごますためのもの. 本来このようなパラメータは必要ないのが望ましいが、実用上は確かに必要.
      sequence<double, 3> rpy_offset;

      // Stabilizer
      /// 0以上
      double joint_p;
      /// 0以上
      double joint_d;
      /// 要素数と順序はrobot->numJoints()と同じ. 0より大きい. 各関節の変位に対する重みの比. default 1. 動かしたくない関節は大きくする. 全く動かしたくないなら、controllable_jointsを使うこと
      sequence<double> st_dq_weight;

    };
    boolean setActKinStabilizerParam(in ActKinStabilizerParam i_param);
    boolean getActKinStabilizerParam(out ActKinStabilizerParam i_param);

  };


  //   struct EEParamidl
  // {
  //   string name;
  //   string parent; // 親リンクの関節名
  //   RTC::Pose3D localPose;
  //   string forceSensor; // センサ名
  //   sequence<double, 6> Kp; // ee frame. 分解加速度制御
  //   sequence<double, 6> Dp; // ee frame. 分解加速度制御
  //   sequence<double, 6> Kw; // ee frame. passivity
  //   sequence<double, 6> Dw; // ee frame. passivity
  //   double odomWeight; // 0より大きい.1以下
  //   sequence<sequence<double, 6> > wrenchC; //wrench の制約. ee frame. ee origin
  //   sequence<double> wrenchld;
  //   sequence<double> wrenchud;
  // };

  // struct EEPointIdl
  // {
  //   RTC::Pose3D pose; // mode frame. eef origin.
  //   sequence<double, 6> velocity; // mode frame. eef origin.
  //   sequence<double, 6> acceleration; // mode frame. eef origin.
  //   sequence<double, 6> wrench; // mode frame. eef origin.
  //   double timeFromStart;
  // };

  // enum Priority {
  //   EE_MIDIUM, // 通常
  //   EE_LOW, // 低優先度タスク
  //   EE_HIGH // 歩行時の遊脚
  // };

  // enum EEFrame {
  //   REL_COG,
  //   REL_HRPSYS_ODOM
  //   // REL_LINK,
  // }

  // enum EEMode {
  //   KEEP_PREV, // to controll only
  //   NOT_CARED,
  //   AIR,
  //   // REL_LINK,
  //   TO_CONTACT,
  //   TO_AIR,
  //   CONTACT
  // };

  // struct EEStateIdl
  // {
  //   string name;
  //   sequence<EEPointIdl> goal;
  //   EEFrame frame;
  //   EEMode mode;
  //   unsigned long modeId; // 現在のmodeId未満のmodeIdは無視する
  //   sequence<boolean, 6> isFree; // 分解加速度制御のIKで考慮するか
  //   Priority priority; // 分解加速度制御のIKでの優先度
  //   sequence<boolean, 6> isPassive; // passivityに基づき力を出力するか

  //   // from controller only
  //   RTC::Pose3D actPose;
  // };

  // enum COGMode {
  //   KEEP_PREV, // to controll only
  //   NOT_CARED,
  //   MANUAL,
  //   AUTO // ref_force+footCoordsによる自動制御. Rとrefdzのみ反映
  // };

  // enum COGFrame {
  //   REL_REFZMP,
  //   REL_HRPSYS_ODOM
  //   // REL_LINK,
  // }

  // struct COGStateIdl
  // {
  //   sequence<EEPointIdl> goal; // posはCOG, Rはroot
  //   COGFrame frame;
  //   COGMode mode;
  //   unsigned long modeId; // 現在のmodeId未満のmodeIdは無視する
  //   Priority priority; // 分解加速度制御のIKでの優先度

  //   // from controller only
  //   RTC::Pose3D actPose;
  // };

  // struct PrimitiveStateIdl
  // {
  //   RTC::Time tm;
  //   sequence<EEStateIdl> eeState;

  //   // from controller only
  //   boolean isStatic;
  // };

};

#endif
