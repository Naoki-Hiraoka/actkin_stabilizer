#ifndef PrimitiveState_idl
#define PrimitiveState_idl

#include "ExtendedDataTypes.idl"

module actkin_stabilizer_msgs
{
  /*
    for biped
  */

  const long RLEG = 0;
  const long LLEG = 1;

  struct LandingPositionIdl
  {
    double x;
    double y;
    double z;
    double nx;
    double ny;
    double nz;
    long l_r; // 0: right. 1: left. 現在支持脚
  };

  struct SteppableRegionIdl
  {
    sequence<sequence<double> > region;
    long l_r; // 0: right. 1: left. 現在支持脚
  };

  struct TimedLandingPosition
  {
    RTC::Time tm;
    LandingPositionIdl data;
  };
  struct TimedSteppableRegion
  {
    RTC::Time tm;
    SteppableRegionIdl data;
  };


  /*
    common
  */
  struct PrimitiveStateIdl
  {
    string name;
    string parentLinkName;
    RTC::Pose3D localPose;

    double time; // interpolation time
    RTC::Pose3D pose; // world frame
    sequence<double, 6> wrench; // world frame. around pose. robot receives
    sequence<double, 6> poseFollowGain;// pose local frame
    sequence<double, 6> wrenchFollowGain;// pose local frame

    // pose local frame (if isGlobal=false). world frame (if isGlobal=true).
    boolean isPoseCGlobal;
    sequence<sequence<double, 6> > poseC; //pose の frameからのerror の制約
    sequence<double> poseld;
    sequence<double> poseud;
    boolean isWrenchCGlobal;
    sequence<sequence<double, 6> > wrenchC; //wrench の制約
    sequence<double> wrenchld;
    sequence<double> wrenchud;

    // pose local frame
    sequence<double, 6> actWrench; // Position control only
    sequence<double, 6> M;
    sequence<double, 6> D;
    sequence<double, 6> K;

    // 支持脚かどうか
    boolean supportCOM;
  };

  struct TimedPrimitiveStateSeq
  {
    RTC::Time tm;
    sequence<PrimitiveStateIdl> data;
  };

  struct TimedPrimitiveStateSeqSeq
  {
    RTC::Time tm;
    sequence<TimedPrimitiveStateSeq> data; // 各要素のtmは一つ前の要素からの経過時間を表す
  };

};

#endif
